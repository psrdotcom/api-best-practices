openapi: 3.1.0
info:
  title: REST API best practices
  description: This API provides best practices for REST API design.
  version: 1.0.0
  contact:
    name: Suresh Raju Pilli
    url: https://www.pillisureshraju.in/
    email: sureshraju.pilli@gmail.com
servers:
  - url: http://localhost:8000
    description: Testing server

tags:
  - name: User
    description: Operations related to user profiles
  - name: Items
    description: Paginated items
  - name: Pets
    description: Operations related to pets
  - name: Products
    description: Operations related to products
  - name: Shapes
    description: Operations related to shapes

paths:
  /items:
    get:
      summary: Get a paginated list of items
      description: Paginated response of the items
      operationId: createItems
      tags:
        - Items
      parameters:
        - name: page
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
          description: Page number (starting from 1)
        - name: size
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
            maximum: 50
          description: Number of items per page (max 50)
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponse'
  /shapes/oneof:
    post:
      summary: Create a shape (oneOf example)
      description: Accepts either a rectangle or circle with strict validation
      operationId: createShape
      tags:
        - Shapes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OneOfShape'
      responses:
        '200':
          description: Shape created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  shape:
                    $ref: '#/components/schemas/OneOfShape'
                  validation_details:
                    type: object
  /products/allof:
    post:
      summary: Create a product (allOf example)
      description: Creates a product that must satisfy all schema requirements
      operationId: createShape
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteProduct'
      responses:
        '200':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  product:
                    $ref: '#/components/schemas/CompleteProduct'
                  calculated_metrics:
                    type: object
                    properties:
                      volume_m3:
                        type: number
                      density_kg_m3:
                        type: number
                      reorder_value:
                        type: number
  /pets:
    post:
      summary: Add a pet
      description: Add a pet which can be either a cat or a dog.
      tags:
        - Pets
      operationId: addPet
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/Cat'
                - $ref: '#/components/schemas/Dog'
              discriminator:
                propertyName: petType
            examples:
              catExample:
                summary: A cat example
                value:
                  petType: cat
                  name: Whiskers
                  favoriteToy: Ball
              dogExample:
                summary: A dog example
                value:
                  petType: dog
                  name: Buddy
                  breed: Golden Retriever
      responses:
        '200':
          description: Pet added successfully.
        '400':
          description: Bad Request - Invalid input data.
        '422':
          description: Unprocessable Entity - Validation error.
        '500':
          description: Internal Server Error - Something went wrong on the server.
components:
  schemas:
    Item:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    PaginatedResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
        total:
          type: integer
        page:
          type: integer
        size:
          type: integer
        total_pages:
          type: integer
    Cat:
      type: object
      properties:
        petType:
          type: string
          enum:
            - cat
        name:
          type: string
        favoriteToy:
          type: string
      required:
        - petType
        - name
    Dog:
      type: object
      properties:
        petType:
          type: string
          enum:
            - dog
        name:
          type: string
        breed:
          type: string
      required:
        - petType
        - name
    ShapeType:
      type: string
      enum:
        - rectangle
        - circle
    ShapeBase:
      type: object
      properties:
        shape_type:
          $ref: '#/components/schemas/ShapeType'
        color:
          type: string
          pattern: '^#[0-9a-fA-F]{6}$'
        name:
          type: string
          minLength: 1
          maxLength: 50
      required:
        - shape_type
    Rectangle:
      allOf:
        - $ref: '#/components/schemas/ShapeBase'
        - type: object
          properties:
            width:
              type: number
              exclusiveMinimum: 0
              maximum: 1000
            height:
              type: number
              exclusiveMinimum: 0
              maximum: 1000
            aspect_ratio:
              type: number
          required:
            - width
            - height
    Circle:
      allOf:
        - $ref: '#/components/schemas/ShapeBase'
        - type: object
          properties:
            radius:
              type: number
              exclusiveMinimum: 0
              maximum: 500
            circumference:
              type: number
            area:
              type: number
          required:
            - radius
    OneOfShape:
      type: object
      properties:
        shape:
          oneOf:
            - $ref: '#/components/schemas/Rectangle'
            - $ref: '#/components/schemas/Circle'
      required:
        - shape

    # allOf Example Schemas
    BaseProduct:
      type: object
      properties:
        id:
          type: string
          pattern: '^[A-Z]{2}[0-9]{6}$'
        name:
          type: string
          minLength: 1
          maxLength: 100
        price:
          type: number
          exclusiveMinimum: 0
      required:
        - id
        - name
        - price

    InventoryItem:
      type: object
      properties:
        stock_count:
          type: integer
          minimum: 0
        warehouse_location:
          type: string
          pattern: '^[A-Z]-[0-9]{2}-[0-9]{2}$'
        reorder_point:
          type: integer
          minimum: 0
      required:
        - stock_count
        - warehouse_location
        - reorder_point

    ShippingDetails:
      type: object
      properties:
        weight_kg:
          type: number
          exclusiveMinimum: 0
          maximum: 1000
        dimensions_cm:
          type: array
          items:
            type: number
            exclusiveMinimum: 0
            maximum: 300
          minItems: 3
          maxItems: 3
        fragile:
          type: boolean
          default: false
      required:
        - weight_kg
        - dimensions_cm

    CompleteProduct:
      allOf:
        - $ref: '#/components/schemas/BaseProduct'
        - $ref: '#/components/schemas/InventoryItem'
        - $ref: '#/components/schemas/ShippingDetails'